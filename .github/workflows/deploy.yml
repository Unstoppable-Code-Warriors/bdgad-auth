name: CI/CD Pipeline

on:
    push:
        branches: [main, master]
    pull_request:
        branches: [main, master]

env:
    DOCKER_IMAGE_NAME: bdgad-auth
    NODE_VERSION: "22"

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        outputs:
            image-tag: ${{ steps.meta.outputs.tags }}
            image-digest: ${{ steps.build.outputs.digest }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64,linux/arm64

    database-operations:
        runs-on: ubuntu-latest
        needs: build-and-push
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run database migrations
              env:
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}
              run: npm run db:migrate

            - name: Initialize system admin
              env:
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}
                  SYSTEM_ADMIN_EMAIL: ${{ secrets.SYSTEM_ADMIN_EMAIL }}
                  SYSTEM_ADMIN_PASSWORD: ${{ secrets.SYSTEM_ADMIN_PASSWORD }}
              run: npm run db:init

    deploy:
        runs-on: ubuntu-latest
        needs: [build-and-push, database-operations]
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

        steps:
            - name: Deploy to VM
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VM_HOST }}
                  username: ${{ secrets.VM_USER }}
                  key: ${{ secrets.VM_PRIVATE_KEY }}
                  port: 22
                  envs: DOCKER_IMAGE_NAME,DOCKER_HUB_USERNAME,DOCKER_HUB_ACCESS_TOKEN,VM_ENV_PATH
                  script: |
                      set -e  # Exit on any error

                      # Set variables
                      DOCKER_IMAGE="${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest"
                      CONTAINER_NAME="${DOCKER_IMAGE_NAME}"

                      echo "🚀 Starting deployment..."
                      echo "Docker Image: $DOCKER_IMAGE"
                      echo "Container Name: $CONTAINER_NAME"
                      echo "Env Path: $VM_ENV_PATH"

                      # Check if Docker is running
                      if ! docker info > /dev/null 2>&1; then
                          echo "❌ Docker is not running or not accessible"
                          exit 1
                      fi

                      # Login to Docker Hub
                      echo "🔐 Logging into Docker Hub..."
                      echo "$DOCKER_HUB_ACCESS_TOKEN" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

                      # Pull the latest image
                      echo "📥 Pulling latest image..."
                      docker pull $DOCKER_IMAGE

                      # Stop and remove existing container if it exists
                      if docker ps -q -f name="^${CONTAINER_NAME}$" | grep -q .; then
                          echo "🛑 Stopping existing container..."
                          docker stop $CONTAINER_NAME
                          docker rm $CONTAINER_NAME
                      elif docker ps -aq -f name="^${CONTAINER_NAME}$" | grep -q .; then
                          echo "🗑️ Removing stopped container..."
                          docker rm $CONTAINER_NAME
                      fi

                      # Check if env file exists
                      if [ ! -f "$VM_ENV_PATH" ]; then
                          echo "❌ Environment file not found at: $VM_ENV_PATH"
                          exit 1
                      fi

                      # Run new container
                      echo "🚀 Starting new container..."
                      docker run -d \
                        --name $CONTAINER_NAME \
                        --restart unless-stopped \
                        -p 3000:3000 \
                        --env-file $VM_ENV_PATH \
                        $DOCKER_IMAGE

                      # Verify deployment
                      echo "⏳ Waiting for container to start..."
                      sleep 10

                      if docker ps --filter "name=^${CONTAINER_NAME}$" --filter "status=running" --format "{{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
                          echo "✅ Deployment successful! Container is running."
                          echo "📋 Recent logs:"
                          docker logs --tail 20 $CONTAINER_NAME
                      else
                          echo "❌ Deployment failed! Container is not running."
                          echo "📋 Error logs:"
                          docker logs --tail 50 $CONTAINER_NAME
                          exit 1
                      fi

                      # Cleanup old images (keep last 3 versions)
                      echo "🧹 Cleaning up old images..."
                      OLD_IMAGES=$(docker images "${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}" --format "{{.ID}}" | tail -n +4)
                      if [ ! -z "$OLD_IMAGES" ]; then
                          echo $OLD_IMAGES | xargs docker rmi || true
                      fi

                      # General cleanup
                      docker system prune -f > /dev/null 2>&1 || true

                      echo "🎉 Deployment completed successfully!"
              env:
                  DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
                  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
                  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
                  VM_ENV_PATH: ${{ secrets.VM_ENV_PATH }}
